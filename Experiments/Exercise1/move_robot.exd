#!/usr/bin/env python

import hbp_nrp_excontrol.nrp_states as states
from hbp_nrp_excontrol.nrp_states._ModelServiceState import SetModelServiceState
from hbp_nrp_excontrol.logs import clientLogger
import smach
from smach import StateMachine, CBState
import rospy
from gazebo_msgs.msg import ModelStates
from geometry_msgs.msg import Vector3
import numpy as np
import csv

# location where data are saved
csv_file_name = '/home/kuras/Documents/Neurorobotics_miniprojects/miniproject1/robot_position.csv'

FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'
# state machine initialization
sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])
# userdata allows to have kind of global variables
sm.userdata.state = np.array([0.,0.])
sm.userdata.trap_counter = 0
sm.userdata.trap_state = None

# write csv file header
with open(csv_file_name,'w') as f:
    w = csv.writer(f)
    w.writerow(['x','y'])

def state_callback(msg):
    '''this function is called whenever the robot state changed
        the position (x,y) and orientation (theta) are saved in userdata'''
    p = msg.pose[0]
    sm.userdata.state[0] = p.position.x
    sm.userdata.state[1] = p.position.y
    with open(csv_file_name,'a') as f:
        w = csv.writer(f)
        w.writerow([p.position.x, p.position.y])

# the subscriber calls state_callback() whenever it receives a 'ModelState' message from '/gazebo/model_states'
rospy.Subscriber('/gazebo/model_states', ModelStates, state_callback)

def check_trap():
    @smach.cb_interface(input_keys=['trap_counter', 'trap_state', 'state'],
                        output_keys=['trap_counter', 'trap_state'],
                        outcomes=['valid', 'invalid'])
    def check(userdata):
        if userdata.trap_counter == 0:
            userdata.trap_state = userdata.state.copy()
            userdata.trap_counter += 1
            return 'invalid'
        else:
            if np.linalg.norm(userdata.state - userdata.trap_state) > 0.05:
                userdata.trap_state = None
                userdata.trap_counter = 0
                return 'invalid'
            else:
                userdata.trap_counter += 1 
                if userdata.trap_counter < 10:
                    return 'invalid'
                else:
                    userdata.trap_state = None
                    userdata.trap_counter = 0
                    return 'valid'
    return check

def new_spawn():
    x = np.random.choice([-4., 4.])
    y = np.random.choice([-4., 4.])
    if x == -4.:
        theta = -np.sign(y)*np.pi/ 4.
    else:
        theta = -np.sign(y) * 3 * np.pi/ 4.
    return SetModelServiceState('robot', Vector3(x, y, 0.1), Vector3(0., 0., theta), Vector3(1., 1., 1.))

with sm:
 
    # Verify whether the robot is trapped/stucked
    StateMachine.add("check_trap",
                     CBState(check_trap()),
                     transitions = {"valid": "check_wait", ##_TO_DO_## Modify transitions
                                    "invalid": "check_wait"})
    
    # Wait 1 sec before checking again
    StateMachine.add("check_wait",
                     states.ClockDelayState(1),
                     transitions = {"valid": "check_wait",
                                    "invalid": "check_trap",
                                    "preempted": PREEMPTED})
    
    # Move the robot to a new position
    ##_TO_DO_## write the StateMachine.add() that triggers the function 'new_spawn()'
    # Hint: there is 3 possible transitions associated to 'SetModelServiceState()': "succeeded", "preempted", "aborted"