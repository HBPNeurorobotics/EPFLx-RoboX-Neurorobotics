{"cells":[{"metadata":{},"cell_type":"markdown","source":["# Exercise 2\n","\n","# Transform the recorded robot positions into a Self Organizing Map (SOM)"]},{"metadata":{},"cell_type":"markdown","source":["--------------------------------------\n","\n","--------------------------------------\n","### Initialization. Get data from solved Excercise 1\n","The goal of this exercise is to generate a Self Organizing Map based on the recorded robot positions of Exercise 1.\n","If you didn't complete Exercise 1, clone and launch the experiment *\"Exercise 2: Transform robot positions ... (SOM)\"* of the [Neurorobotics platform](http://148.187.97.48/#/esv-private) to generate the file __*robot_positions.csv*__.\n","\n","__Remarks:__\n","- Open __Exercise 1__ in your Collab's space.\n","- Move to the part __*C. \"Record the robot positions\"*__.\n","- Execute all comands within the part C using __*Exersice_2_i*__ from the list of NRP experiment for simulation.\n","\n","**Note that Exercise 2's experiment contains the solution of Exercise 1.**"]},{"metadata":{},"cell_type":"markdown","source":["--------------------------------------------\n","\n","--------------------------------------------\n","\n","### Content:\n","- <font size=\"4\">**[A. Utils installation and data downloading](#A)**</font></br>\n",">- <font size=\"3\">[A.1. Install SOM utils](#A1)</font></br>\n",">- <font size=\"3\">[A.2. Download from this Collab's Storage](#A2)</font></br>\n","- <font size=\"4\">**[B. Complete the SOM implementation](#B)**</font></br>\n",">- <font size=\"3\">[B.1. SOM description](#B1)</font></br>\n",">- <font size=\"3\">[B.2. SOM function (TO DO) ](#B2)</font></br>\n",">- <font size=\"3\">[B.3. Upload SOM function into the storage](#B3)</font></br>\n","- <font size=\"4\">**[C. SOM simulation](#C)**</font></br>\n",">- <font size=\"3\">[C.1. Perform SOM training (editable) ](#C1)</font></br>\n",">- <font size=\"3\">[C.2. Save SOM training result](#C2)</font></br>\n","- <font size=\"4\">**[D. Result evaluation](#D)**</font></br>"]},{"metadata":{},"cell_type":"markdown","source":["---------------------------------------------------\n","\n","---------------------------------------------------\n","## A. Utils installation and data downloading<a id='A'></a>"]},{"metadata":{},"cell_type":"markdown","source":["### A.1. Install SOM utils <a id='A1'></a>\n","Run cell to intall utils."]},{"metadata":{"trusted":true,"scrolled":true,"editable":false},"cell_type":"code","source":["# Install SOM utils\n","from IPython.display import clear_output\n","! pip uninstall epflx_robox_nrp_utils -y\n","! pip install --user --force-reinstall git+https://github.com/HBPNeurorobotics/EPFLx-RoboX-Neurorobotics-utils#egg=epflx_robox_nrp_utils\n","! pip install --upgrade \"hbp-service-client==1.1.1\"\n","clear_output()"],"execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":["### A.2. Download from this Collab's Storage <a id='A2'></a>\n","Run cell to download the input data."]},{"metadata":{"trusted":true,"scrolled":true,"editable":false,"collapsed":true},"cell_type":"code","source":["# Download the default robot_positions.csv file from this Collab's Storage\n","clients = get_hbp_service_client()\n","collab_path = get_collab_storage_path()\n","filename = raw_input(\"Enter name of data-file your want to use for simulation:\")\n","if(filename==''): filename = 'robot_positions.csv'; clear_output()\n","clients.storage.download_file(collab_path + '/' + filename, './robot_positions.csv')"],"execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":["---------------------------------------------------\n","\n","---------------------------------------------------\n","## B. Complete the SOM implementation <a id='B'></a>"]},{"metadata":{},"cell_type":"markdown","source":["### B.1. SOM description <a id='B1'></a>\n","****\n","\n","**Exercise goal:**<br>\n","Your task is to implement a self-organizing map (SOM) that represents the environment where the robot evolves. The advantage of mapping a 2D space is that it is easy to visualize, so that you can easily control the performance of the algorithm by visual inspection.\n","\n","**Input:** Coordinates of robot positions **given by Exercise 1** ( <font color=red>*'robot_positions.csv'*</font> ).<br>\n","\n","**Output:** Self-Organized Map ( <font color=red>*'SOM_data_lattice.csv'*</font> ).<br>\n","****\n","\n","#### SOM algorithm\n","*<font color=green>**while**</font> (`N_trials` are not done):*<br>\n","> <font color=blue>*# TRIAL: `run_trial()`*</font><br>\n","> *mix your dataset: `datamix()` - an order*<br>\n","> *<font color=green>**while**</font> (not all points are processed):*<br>\n",">> *<font color=blue># EPISODE: `run_episode()`*</font><br>\n",">> *take next point according to an order*<br>\n",">> *calculate `distance()`*<br>\n",">> *define the `winner()`*<br>\n",">> *calculate `neighborhood_factor()`*<br>\n",">> *update SOM-lattice by `update_lattice()`*<br>\n","\n","****\n","\n","**Additional functions:**<br>\n"," - **`datamix()`:** genetrate new order of robot position points; <font color=green>**return**</font> *__array__ of new order*.<br>\n"," - **`distance()`:** the euclidean distance between a data point and a neuron; <font color=green>**return**</font> *__array__ of distance to all neurons of SOM*.<br>\n"," - **`winner()`:** the winning neuron; <font color=green>**return**</font> *coordinates **[x,y]** of the winning neuron*.<br>\n"," - **`neighborhood_factor()`:** the Gaussian neighborhood function; <font color=green>**return**</font> *__matrix__ of neighborhood factors for each neuron to the current winning neuron*.<br>\n"," - **`update_lattice()`:** update the SOM-lattice according to SOM learning rule; <font color=green>**return**</font> *__nothing__*.<br>\n","\n","**Variable parameters:**<br>\n"," - **`eta()`:** the leaning-rate parameter; <font color=green>**return**</font> *updated __eta__ value*.<br>\n"," - **`sigma()`:** the exponantial decay parameter; <font color=green>**return**</font> *updated __sigma__ value*.<br>\n","****\n","\n","**Global variables initialization (<font color=blue>default</font>, <font color=red>by students</font>):**<br>\n"," - <font color=blue>**self.video:**</font> the visualization trigger (0 - no, 1 - yes).<br>\n"," - <font color=blue>**self.csv_file:**</font> the input file ( <font color=red>*'NRP_data_robot_positions.csv'*</font> ).<br>\n"," - <font color=blue>**self.pos:**</font> the data from input file ( <font color=red>*'NRP_data_robot_positions.csv'*</font> ).<br>\n"," - <font color=blue>**self.lattice:**</font> the initial SOM randomly generated.<br>\n"," - <font color=blue>**self.trial:**</font> the index of current trial (initial value is 0).<br>\n","<br>\n"," - <font color=red>**self.Nn:**</font> the parameter of SOM size [_Nn_ x _Nn_].<br>\n"," - <font color=red>**self.eta_0:**</font> the **initial** value of leaning-rate parameter. <br>\n"," - <font color=red>**self.sigma_0:**</font> the **initial** value of exponantial decay parameter<br>\n"," - <font color=red>**self.tau:**</font> the time constant of SOM algorithm.<br>\n"," - <font color=red>**self.N_trials:**</font> the number of trials during learning.<br>\n"," - <font color=red>**self.lattice_limit:**</font> the range of **initial** values to initialize SOM-lattice.<br>\n","****\n","\n","<font color=red>**TO DO:**</font><br>\n","**1)** Initialize the <font color=red>constant parameters (by students)</font>.<br>\n","**2)** Implement the <font color=red>SOM training stages</font>: trial and episode.<br>\n","**3)** Implement the <font color=red>additional functions</font>.<br>\n","**4)** Implement the <font color=red>variable parameters</font>.<br>\n","****\n","\n","<font color=red>**IMPORTANT:**</font><br>\n","**1)** The first line of SOM implementation template: <font color=green>*%%writefile __SOM_solution.py__*</font>.<br> Please, replace _'Surname'_ and _'Name'_ with your own Surname and Name. Don't uncomment this line until you are ready to submit.<br>\n","**2)** Please, pay attention that the grading of function will be executed **ONLY** with <font color=red>**SOM 12x12**</font> but you can use other sizes of SOM to see how it works. For example, we will ask you to use a bugger lattice for exercise 3 (reinforcement learning implementation).<br>\n","**3)** Please, pay attention that the grading process has the timelimit of your function simulation. **The timelimit** is equal to <font color=red>**90 seconds**</font>.<br>\n","**4)** Once you are ready to submit, please, uncomment the first line of script ( <font color=green>*%%writefile __SOM_solution.py__*</font> ) and run cell. Thus, your script will be saved as file with such name. **Then, submit this file.**\n","\n","****\n","****"]},{"metadata":{},"cell_type":"markdown","source":["### B.2. SOM function (TO DO) <a id='B2'></a>"]},{"metadata":{"trusted":true,"scrolled":true,"collapsed":true},"cell_type":"code","source":["#%%writefile SOM_solution.py \n","\n","# class SOM (SOM_solution)\n","import numpy as np\n","import random\n","import time\n","\n","from IPython import display\n","\n","\n","class SOM():\n","\n","\t#############################################################################################################\n","\t#        Self-Organizing Map mapping the environment depending on the positions visited by the robot        #\n","\t#############################################################################################################\n","    \n","\t# function to initialize class SOM\n","\tdef __init__(self, video=0, csv_file='robot_positions.csv', Nn=None):\n","\t\tfrom epflx_robox_nrp_utils.SOM.SOM_additional import SOM_additional\n","\t\tself.somad = SOM_additional()\n","\t\tself.init_parameters()\n","\t\tif(Nn!=None): self.Nn = Nn\n","\t\tself.video = video\n","\t\tself.csv_file = csv_file\n","\t\tself.lattice = np.random.uniform(self.lattice_limit[0],self.lattice_limit[1],(self.Nn,self.Nn,2))\n","        \n","\t# function to run SOM training\n","\tdef run_som(self):       \n","\t\tT = time.time()\n","\t\tself.pos = self.somad.load_data(self.csv_file)\n","\t\tself.trial = 0\n","\t\twhile(self.trial < self.N_trials):\n","\t\t\tself.run_trial()\n","\t\t\tself.trial += 1\n","\t\t\tself.somad.save_lattice(self.lattice,self.Nn)\n","\t\t\tif(self.video): self.somad.visualization(self.lattice,self.Nn,self.eta(),self.sigma(),self.trial)\n","\t\tdisplay.clear_output(wait=True)\n","\t\tprint 'Done. Simulation time is ', time.time()-T, '(s).'\n","        \n","        \n","\t\"\"\"=======================================================================================================\"\"\"\n","\t\"\"\"                                                TO DO                                                  \"\"\"\n","\t\"\"\"=======================================================================================================\"\"\"\n","        \n","\t##########################################\n","\t\"\"\"         Constant parameters        \"\"\"\n","\t##########################################\n","        \n","\tdef init_parameters(self):\n","\t\tself.Nn = 12\n","\t\tself.eta_0 = 1.0\n","\t\tself.sigma_0 = 1.0        \n","\t\tself.tau_eta = 100.0\n","\t\tself.tau_sigma = 100.0\n","\t\tself.N_trials = 100.0\n","\t\tself.lattice_limit = [0.0, 0.0]\n","\n","\n","\t#########################################\n","\t\"\"\"        SOM training stages        \"\"\"\n","\t#########################################\n","\n","\tdef run_trial(self):\n","\t\tmix = self.datamix();\n","\t\tfor i in range(self.pos.shape[0]):\n","\t\t\tself.run_episode(mix, i)\n","\n","\n","\tdef run_episode(self, mix, i):\n","\t\tpt = self.pos[mix[i]]\n","\t\td = self.distance(pt)\n","\t\t[lx,ly] = self.winner(d)\n","\t\th = self.neighborhood_factor(lx[0],ly[0])\n","\t\tself.update_lattice(h,pt)\n","\n","\n","\t##########################################\n","\t\"\"\"        Additional functions        \"\"\"\n","\t##########################################\n","\n","\tdef datamix(self):\n","\t\tmix = np.arange(self.pos.shape[0])\n","\t\tnp.random.shuffle(mix)\n","\t\treturn mix\n","\n","\n","\tdef distance(self, pt):\n","\t\treturn np.linalg.norm(self.lattice - pt,axis=2)**2\n","\n","\n","\tdef winner(self,d):\n","\t\treturn np.where(d == d.min())\n","\n","\n","\tdef neighborhood_factor(self,lx,ly):\n","\t\th = np.zeros((self.Nn,self.Nn))\n","\t\tfor i in range(self.Nn):\n","\t\t\tfor j in range(self.Nn):\n","\t\t\t\tdist = (i-lx)**2 + (j-ly)**2\n","\t\t\t\th[i,j] = np.exp(-dist/(2*self.sigma()**2))\n","\t\treturn h\n","\n","\n","\tdef update_lattice(self,h,pt):\n","\t\tfor i in range(self.lattice.shape[2]):\n","\t\t\tself.lattice[:,:,i] += self.eta()*h*((pt-self.lattice)[:,:,i])\n","    \n","\n","\t#########################################\n","\t\"\"\"        Variable parameters        \"\"\"\n","\t#########################################\n","\n","\tdef eta(self):\n","\t\treturn self.eta_0*(1-self.trial/self.tau_eta)\n","\n","\n","\tdef sigma(self):\n","\t\treturn self.sigma_0*(1-self.trial/self.tau_sigma)"],"execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":["****\n","### <font color=red> B.3. Upload SOM function into the storage</font> <a id='B3'></a>\n","Once you are done and ready to submit your solution, please, follow next steps: </br>\n","\n","- Move to [B.2. SOM function](#B2) and uncomment the first line <font color=red> __*%%writefile SOM_solution.py*__</font> ;\n","- Run cell [B.2. SOM function](#B2) then you sholud see <font color=red> __*Writing SOM_solution.py*__</font> just above; \n","- Run cell [B.3. Upload SOM function into the storage](#B3) to save this file in storage (check your storage to see the file there)."]},{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","source":["import os; filename = 'SOM_solution.py'\n","# if you create new SOM-function\n","if(os.path.isfile(filename)):\n","    # if old version of SOM function exists\n","    if(clients.storage.exists(collab_path+'/'+filename)): \n","        clients.storage.delete(collab_path+'/'+filename)\n","    pydata = clients.storage.upload_file(filename, collab_path + '/'+filename, 'text/x-python')\n","    # remove \n","    os.remove(filename)"],"execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":["----------------------------------\n","\n","----------------------------------\n","## C. SOM simulation <a id='C'></a>"]},{"metadata":{},"cell_type":"markdown","source":["### C.1. Perform SOM training (editable) <a id='C1'></a>\n","This cell runs the simulation of SOM training that uses a [your implemented script](#B2). You can visualize this process.\n","- *som = SOM(visualization)* # upload your SOM function [**visualization**: No - **0**, Yes - **1**];</br> \n","- *som.run_som()* # run simulation."]},{"metadata":{"trusted":true},"cell_type":"code","source":["som = SOM(1)\n","som.run_som()"],"execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":["### C.2. Save SOM training result <a id='C2'></a>\n","Result of SOM training is the lattice (represented in red on the figure of visualization). The lattice data was saved into the file __*'SOM_data_lattice.csv'*__ which is contained in Ipython space now. This commads upload the __*'SOM_data_lattice.csv'*__ into your Collab's storage. \n","\n","Run the cell and then check your storage out to see the __*'SOM_data_lattice.csv'*__ there."]},{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","source":["# if you create new SOM-function\n","import os; filename = 'SOM_data_lattice.csv'\n","if(os.path.isfile(filename)):\n","    # Remove an old version of SOM_data_lattice.csv (if it exists)\n","    if(clients.storage.exists(collab_path+'/'+filename)): \n","        clients.storage.delete(collab_path+'/'+filename)\n","    pydata = clients.storage.upload_file(filename, collab_path + '/'+filename, 'text/csv')"],"execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":["---------------------------------------------------------------------\n","\n","---------------------------------------------------------------------\n","## D. SOM evaluation <a id='D'></a>"]},{"metadata":{},"cell_type":"markdown","source":["Run this cell to get a result of your solution. This result is an average distance between data points (blue dots) and center of clusters (red dots) represented as lattice. The goal of SOM training is to minimize this distance as much as possible."]},{"metadata":{"trusted":true},"cell_type":"code","source":["# Variation: Estimate result of SOM training\n","from epflx_robox_nrp_utils.SOM.SOM_evaluation import SOM_evaluation\n","somev = SOM_evaluation()\n","var, N = somev.run_evaluation()\n","print \"Your score is \", var, \"with SOM size (\", N, \"x\", N,\").\""],"execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":["."]},{"metadata":{},"cell_type":"markdown","source":["."]},{"metadata":{},"cell_type":"markdown","source":["."]},{"metadata":{},"cell_type":"markdown","source":["## =============================  SOM evaluation  ============================"]},{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","source":["import os\n","os.listdir('.')"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","source":["test = os.listdir('.')\n","for item in test:\n","    if item.endswith(\".png\"):\n","        os.remove(os.path.join('.', item))"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","source":["os.remove('csvfile.csv')"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python2","display_name":"Python 2","language":"python"},"language_info":{"mimetype":"text/x-python","nbconvert_exporter":"python","name":"python","pygments_lexer":"ipython2","version":"2.7.14","file_extension":".py","codemirror_mode":{"version":2,"name":"ipython"}}},"nbformat":4,"nbformat_minor":2}